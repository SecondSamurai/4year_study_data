
                            Лабораторная работа №3

                    ОРГАНИЗАЦИЯ КОНТРОЛЯ ПРАВИЛЬНОСТИ ВВОДА.

Цель: Научиться использовать функции преобразования типов,организовывать защиту 
      данных при вводе исходных данных, разрабатывать собственные функции  с 
      параметрами.



Требования: 
 1) Преобразовать структуру программы , используя собственные функции для
    ввода, проверки правильности ввода, вычислений по формуле , вывода резуль-
    тата.
 2) Функции должны использовать параметры.
 3) Использовать функции управления курсором и цветом для организации 
    интерфейса. 



Общие замечания:

  Выбор:

  Инструкция If
   -инструкция If используется для выбора одного из двух направлений
    дальнейшего хода программы;
   -выбор последовательности инструкций осуществляется в зависимости от
    значения условия - заключенного в скобки выражения, записанного после If;
   -инструкция, записанная после else, выполняется в том случае, если
    значение выражения условие равно нулю, во всех остальных случаях
    выполняется инструкция, следующая за условием;
   -если при соблюдении или несоблюдении условия надо выполнить несколько
    инструкций программы, то эти инструкции следует объеденить в группу -
    заключить в фигурные скобки;
   -при помощи вложенных одна в другую нескольких инструкций If можно
    реализовать множественный выбор.

  Инструкция Switch
   -инструкция Switch предназначена для выбора одного из несколькиз возможных
    направлений дальнейшего хода программы;
   -выбор последовательности инструкций осуществляется в зависимости от
    равенства значения переменной-селектора константе, указанной после
    слова case;
   -если значение переменной-селектора не равно ни одной из констант,
    записанных после case, то выполняются инструкции, расположенные после
    слова default;
   -в качестве переменной-селектора можно использовать переменную целого
    (int) или символьного (char) типа.


  Циклы:

  Do while
   -число повторений инструкции цикла do while определяется ходом выполнения
    программы;
   -инструкции цикла do while выполняются до тех пор, пока значение выражения,
    записанного после слова while, не станет равным нулю;
   -после слова while надо записывать условие выполнения инструкции цикла;
   -для завершения цикла do while в теле цикла обязательно должны быть
    инструкции, выполнение которых влияет на условие завершения цикла;
   -цикл do while - это цикл с постусловием, т.е. инструкции тела цикла
    будут выполнены хотя бы один раз;
   -цикл do while, как правило, используется для организации приближенных
    вычислений, в задачах поиска и обработки данных, вводимых с клавиатуры
    или из файла.

  While
   -число повторений инструкции цикла While определяется ходом выполнения
    программы;
   -инструкции цикла While выполняются до тех пор, пока значение выражения,
    записанного после слова While, не станет равным нулю;
   -после слова While надо записывать условие выполнения инструкций цикла;
   -для завершения цикла While в теле цикла обязательно должны быть инструкции,
    выполнение которых влияет на условие завершения цикла;
   -цикл While - это цикл с предусловием, т.е. возможна ситуация, при которой
    инструкции тела цикла ни разу не будут выполнены;
   -цикл While, как правило, используются для организации приближенных
    вычислений, в задачах поиска и обработки данных, вводимых с клавиатуры или
    из файла.



Справочная информация:

  Объявление функций:

   Тип Имя (Тип1 Параметр1, ... Типj Параметрj)
   {
      // Объявления переменных
      // и инструкций функции

      return (значение);
   }

  Тип - тип функции, тип значения, которое функция возвращает. Если функция
  не возвращает значение, то ее тип - void. В теле функции инструкцию return
  в этом случае не пишут.

  Имя - имя функции.

  Типj, Параметрj - тип и параметр функции. Если параметр используется для
  возврата результата, то параметр должен быть ссылкой, т.е. перед именем
  параметра должен быть символ *.



  Функции преобразования:


   -atof <stdlib.h>
      Синтаксис:
       double atof(const char* s);

      Возвращает дробное число, значение которого передано функции в качестве
      аргумента. Функция обрабатывает строку до тех пор, пока символы строки
      являются допустимыми. Строка может быть значением числа как в формате
      с плавающей точкой, так и в экспоненциальном формате.


   -atoi, atol <stdlib.h>
      Синтаксис:
       int atoi(const char* s);
       long atol(const char* s);

      Возвращает целое соответствующего типа, изображение которого передано
      функции в качестве аргумента. Функция обрабатывает символы строки до
      тех пор, пока не встретит символ, не являющийся десятичной цифрой.


   -gcvt <stdlib.h>
      Синтаксис:
       char *gcvt (double значение, int цифр, char* строка);

      Преобразует дробное число в строку. При преобразовании делается попытка
      получить указанное количество значащих цифр, а если это сделать
      невозможно, то число изображается в форме с плавающей точкой.


   -itoa, ltoa, ultoa <stdlib.h>
      Синтаксис:
       char* itoa (int значение, char* строка, int основание);
       char* ltoa (long значение, char* строка, int основание);
       char* ultoa (unsigned long значение, char* строка, int основание);

      Соответственно преобразует целое, длинное целое и длинное беззнаковое
      целое в строку. Число изображается в указанной при вызове функции
      системе счисления.
      Строка - указатель на строку, куда будет помещено изображение числа.
      Основание - задает основание системы счисления (от 2 до 36).
      Максимальная длинна строки, формируемой функцией itoa, - 17 байт,
      функциями ltoa и ultoa - 33 байта.


   -sprintf <stdio.h>
      Синтаксис:
       int sprintf (char *строка, const char* формат, список_переменных);

      Выполняет форматированный вывод в строку.
      Список_переменных - разделенные запятыми имена переменных, задает
      переменные, значения которых должны быть выведены. Параметр формат
      задает способ отображения значений переменных.
      Действие функции sprintf аналогично действию функции printf, но вывод
      выполняется в строку-буфер, а не на экран.



  Функции ввода-вывода:


   -printf <stdio.h>
      Синтаксис:
       int printf(формат, список_переменных);

      Выводит на экран значения переменных. Формат вывода задается в строке
      форматирования, которая помимо спецификатора формата может содержать
      текст и управляющие символы. Значение первой переменной выводиться в
      соответствии с первым спецификатором формата, второй - со вторым, и т.д.

      Спецификаторы формата (необязательный параметр n задает ширину поля
      вывода).
      -----------------------------------------------------------------------
       Спецификатор        Форма вывода
      -----------------------------------------------------------------------
          %ni              Десятичное число со знаком
          %nd

          %nu              Беззнаковое целое десятичное число

          %n.mf            Дробное число с десятичной точкой. Необязательный
                           параметр m задает количество цифр дробной части

          %ne              Дробное число с десятичной точкой или, если число
                           не может быть представлено в форме с десятичной
                           точкой, в экспоненциальной форме

          %ns              Строка символов

          %nc              Символ
      -----------------------------------------------------------------------

      Управляющие и специальные символы.
      -----------------------------------------------------------------------
       Символ              Действие
      -----------------------------------------------------------------------
        \n                 Переводит курсор в начало следующей строки

        \t                 Переводит курсор в очередную позицию табуляции

        \\                 Бэкслэш

        \'                 Кавычка
      -----------------------------------------------------------------------


   -scanf <stdio.h>
      Синтаксис:
       int scanf(const char* формат, список_адресов_переменных);

      Вводит с клавиатуры значения переменных, в соответствии с указанным
      спецификатором формата. Первая переменная получает значение в
      соответсвии с первым спецификатором формата, вторая - со вторым и т.д.

       ! В качестве параметра функции scanf должны передаваться адреса
         переменных, а не их имена.

      -----------------------------------------------------------------------
       Спецификатор        Вводит
      -----------------------------------------------------------------------

         %i                Десятичное число со знаком
         %d

         %u                Беззнаковое целое десятичное число

         %f                Дробное число
         $e

         %s                Строка символа

         %c                Символ
      -----------------------------------------------------------------------


   -puts <stdio.h>
      Синтаксис:
       puts(const char* строка);

      Выводит на экран строку символов и переводит курсор в начало следующей
      строки экрана. В качестве параметра функции можно использовать строковую
      константу или строковую переменную.


   -gets <stdio.h>
      Синтаксис:
       char *gets(char* s);

      Вводит с клавиатуры строку символов. Вводимая строка может содержать
      пробелы.


   -putch <conio.h>
      Синтаксис:
       int putch(int c);

      Выводит на экран символ.


   -getch <conio.h>
      Синтаксис:
       int getch(void);

      Возвращает код символа нажатой клавиши. Если нажата служебная клавиша,
      то функция getch возвращает 0. В этом случае, для того, чтобы
      определить, какая служебная клавиша нажата, нужно обратиться к функции
      getch еще раз.

       ! Функция getch не выводит на экран символ, соответсвующий нажатой
         клавише.


   -cputs <conio.h>
      Синтаксис:
       cputs (const char* строка);

      Выводит на экран строку. Цвет выводимых символов можно задать при
      помощи функции textcolor, цвет фона - при помощи функции textbackground.

       ! Для перехода к началу следующей строки вместо \n следует использовать
         символы \n\r, иначе курсор лишь переводится на новую строку, но не
         возвращается к левой границе окна. То же самое относиться и к
         функции cprintf.


   -cprintf <conio.h>

      Как и функция printf, функция cprintf используется для вывода на экран
      сообщений и значений переменных. При этом имеется возможность задать
      цвет выводимых символов и цвета фона.


   -textcolor <conio.h>
      Синтаксис:
       void textcolor(int цвет);

      Задает цвет для выводимого функциями cputs и cprintf текста. В качестве
      параметра цвет обычно используют одну из перечисленных ниже именованных
      констант.
      -----------------------------------------------------------------------
       Цвет                Константа           Значение константы
      -----------------------------------------------------------------------
       Черный              Black               0
       Синий               Blue                1
       Зеленый             Green               2
       Бирюзовый           Cyan                3
       Красный             Red                 4
       Сиреневый           Magenta             5
       Коричневый          Brown               6
       Светло-серый        Lightgray           7
       Серый               Darkgray            8
       Голубой             Lightblue           9
       Светло-зеленый      Lightgreen          10
       Светло-бирюзовый    Lightcyan           11
       Алый                Lightred            12
       Светло-сиреневый    Lightmagenta        13
       Желтый              Yellow              14
       Белый (яркий)       White               15
      -----------------------------------------------------------------------


   -textbackground <conio.h>
      Синтаксис:
       void textbackground(int цвет);

      Задает цвет фона, на котором появляется текст, выводимый функциями
      cputs и cprintf. В качестве параметра цвет обычно используют одну из
      перечисленных ниже именованных констант.
      -----------------------------------------------------------------------
       Цвет                Константа           Значение константы
      -----------------------------------------------------------------------
       Черный              Black               0
       Синий               Blue                1
       Зеленый             Green               2
       Бирюзовый           Cyan                3
       Красный             Red                 4
       Сиреневый           Magenta             5
       Коричневый          Brown               6
       Светло-серый        Lightgray           7
      -----------------------------------------------------------------------


   -gotoxy <conio.h>
      Синтаксис:
       void gotoxy(int x, int y);

      Переводит курсор в позицию с указанными координатами. Координата x
      задает номер колонки, координата y - номер строки, на пересечении
      которых находится знакоместо, куда переводится курсор.


   -clrscr <conio.h>
      Синтаксис:
       void clrscr(void);

      Очищает экран и закрашивает его цветом, заданным функцией textbackground.


   -window <conio.h>
      Синтаксис:
       void window(int x1, int y1, int x2, int y2);

      Определяет окно - область экрана. Параметры x1, y1 задают координаты
      левого верхнего угла окна относительно экрана, параметры x2, y2 -
      правого нижнего.
